'use strict';

var gulp = require('gulp');
var sass = require('gulp-sass');
var rename = require('gulp-rename');
var sourcemaps = require('gulp-sourcemaps');
var autoprefixer = require('gulp-autoprefixer');
var webpack = require("webpack-stream");
var webpackConfig = require("./webpack.config.js");


var BASE_DIR = './{{ project_name }}';
var PROJECT_DIR = BASE_DIR + '/{{ project_name }}';
var STATIC_DIR = PROJECT_DIR + '/static';
var BUILD_DIR = STATIC_DIR + '/build/';
var JS_PATH = BASE_DIR + '/**/static/assets/js/**';
var CSS_PATH = BASE_DIR + '/**/static/assets/styles/**/*.scss';
var WEBPACK_ENTRY = STATIC_DIR + '/assets/js/main.js'


gulp.task('sass', function () {
  var options = {
        includePaths: [STATIC_DIR],
        outputStyle: 'compressed'
  };

  gulp.src(CSS_PATH)
    .pipe(sourcemaps.init())
    .pipe(sass(options).on('error', sass.logError))
    .pipe(rename('bundle.css'))
    .pipe(autoprefixer({
      browsers: ['last 10 versions'],
      cascade: false
    }))
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest(BUILD_DIR));
});


gulp.task('js', function () {
  return gulp.src(WEBPACK_ENTRY)
    .pipe(webpack(webpackConfig))
    .pipe(rename('bundle.js'))
    .pipe(gulp.dest(BUILD_DIR));
});


gulp.task('watch', function() {
  gulp.watch(CSS_PATH, ['sass']);
  gulp.watch(JS_PATH, ['js']);
});


gulp.task('default', ['watch', 'sass', 'js']);
