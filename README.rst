==================================
Django project template by asyncee
==================================

Django template designed for fast and easy project creation, flexible custom
database/email/whatever settings and keeping your database/secret-key/any-sensitive-data
private by not including it in your CVS - just configure sensitive data to your needs,
drop it over the settings files and forget it.
**Remeber** not to commit your database/email ini config file, but only
your specific local_setings.

Quickstart
==========
To create project using this template::

    django-admin.py startproject --template=https://github.com/asyncee/django-project-template/zipball/master <project_name>

To create virtualenv, generate project secret key, install requirements,
create your user configuration files and nodejs tools::

    fab bootstrap

To run Django in debug mode::

    vim .config-dev-username.ini            # configure database
    vim local_settings_username.py          # configure it to your needs

    # to run server
    python manage.py runserver --settings=project_name.local_settings_username

    # to syncdb
    python manage.py syncdb --settings=project_name.local_settings_username


Requirements
============

- python >= 2.7 (may work with lower versions)
- django >= 1.6b1 (you can manually configure settings to make it compatible with older versions)
- pip
- virtualenv
- fabric
- bash (preinstalled on most unix systems)

If you want to use wheel:

- pip >= 1.4
- setuptools >= 0.8
- `wheel`_

.. wheel_: https://wheel.readthedocs.org/en/latest/

You can install latest versions of pip and setuptools with::

    pip install --upgrade pip setuptools


Description
===========
The template consists of:

- settings modules
- private database/email configuration files
- predefined directory structure, including cache, templates and static directories
- fabric helper script for one command deploy/minify files
- requirements.txt file

Settings modules
----------------

- settings.py - main configuration file, placeholder for Django and third-party settings. Main features is:

    - south preinstalled
    - secret key is readed from external file, called '.secret'. This file
      generated by `fab generate_secret` or `fab bootstrap` commands. Storing
      secret in external file is good - you don't need to store it in your VCS
      along with other files. `.gitignore` ommitting secret file included.
    - configured with sane defaults, although you need to modify settings to your needs.

- local_settings_{debug,production,username}.py - this file holds any
  environment-specific settings. It may be settings for production or developing.
  This file used when you run Django, so you must point one to it. You can do that
  by defining DJANGO_TEMPLATE_SETTINGS environment variable, --settings argument to
  `manage.py runserver` or explicitly specify it in your uwsgi.ini, for example.

Private configuration files
---------------------------
This files holds private database/email configuration that should not be
staged in your VCS. Also this settings can be different in different project
environments, sush as production.
Template includes two examples of private configuration files:

- .config-dev-example.ini
- .config-production-example.ini

Just copy the file and change requisites according your environment, then
set right filename in local_settings.

Directory structure
-------------------
Directory structure can vary project-by-project so you can skip this section
and configure it to your needs.
Default configuration implies this set::

    static/
        css/
            src/
            build/
        js/
            src/
            build/
        img/

`src` is directories where your source "development" files is stored.
This files can be used while developing or debugging. Minified/concatenated
files stored in `build`. When you deploying the project, configure web-server
to serve static from `build` directories. You may also want to add .htaccess
file containing *deny from all* to `src` directories, so nodoby can access it
from outside.

Fabric helper script
--------------------
This script helps you to bootstrap the project.

Tasks you can perform:

- bootstrap
- generate_secret
- install_nodejs
- install_nodejs_modules
- install_requirements
- make_virtualenv
- minify
- minifycss
- minifyjs
- stylus_convert
- create_user_config_file

---------
bootstrap
---------
This task is sequence of other tasks and does the following:

- Creates virtualenv directory, called `env`
- Installs requirements into this virtual environment. Optional you can use
  `wheel` module to install dependencies. You need to supply `wheels=<wheels-dir>`
  and `noindex=1` if you don't want to use pypi index and check for new versions::

    fab bootstrap:wheels=~/wheels,noindex=1

  Setup script will then search for \*.whl files in `wheels` directory.

- Generates secret key for Django
- Installs nodejs and it's modules by default. You may override this
  behaviour by passing :nonode to bootstrap command::

    fab bootstrap:nonode

- Prompts if you want to create some development configuration files. Why
  only development? Because deploying site in production is very accurate
  job that should be dony by hands, including preparing configuration files.

Arguments:

- `nonode`: do not install nodejs
- `cpus`: number of cpus to use when compiling nodejs, defaults to 1.

::

    fab bootstrap:nonode
    fab bootstrap:cpus=8

---------------
generate_secret
---------------
Generates secret key file with 512-length random string inside.

--------------
install_nodejs
--------------
Installs nodejs in fabfile script (project root where manage.py lies) directory.
All binary files placed in `./bin`, libraries in `./lib`, etc.

This command accepts one optional argument:
`cpus` - number of jobs to use when compiling (make -j). Default value is 1.

::

    fab install_nodejs:cpus=8


----------------------
install_nodejs_modules
----------------------
Installs uglify-js, stylus and clean-css into local nodejs directory. All
binaries available as symlinks in `./bin` directory.

--------------------
install_requirements
--------------------
Installs project dependencies into virtual environment. There is no need to
source `activate` script.

---------------
make_virtualenv
---------------
Creates virtual environment, `env`.

--------------
stylus_convert
--------------
Processes stylus `\*.styl` files from `/static/css/styl/` into `/static/css/src`
directory.

---------
minifycss
---------
Minifies and concatenates all css files from `/static/css/src` into
`/static/css/build` directory.

--------
minifyjs
--------
Minifies and concatenates all js files from `/static/js/src` into
`/static/js/build` directory.

------
minify
------
Runs `minifycss`, `stylus_convert` and `minifyjs` tasks.

-----------------------
create_user_config_file
-----------------------
Prompts if user want to create development settings and config with
specified username. This task effectively copies and renames example
settings and configuration files, so user just need to configure it without
routine.


Requirements file
-----------------
This is the place where the project dependencies is stored. How to specify
dependencies you can read in `official pip documentation`_.

.. _official pip documentation: http://www.pip-installer.org/en/latest/requirements.html.


LICENSE
=======

.. image:: http://i.creativecommons.org/l/by/3.0/88x31.png
   :alt: Creative Commons License

Django-project-template by asyncee_ is licensed under a
`Creative Commons Attribution 3.0 Unported License`_.

.. _asyncee: https://github.com/asyncee/django-project-template
.. _Creative Commons Attribution 3.0 Unported License: http://creativecommons.org/licenses/by/3.0/
