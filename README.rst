=======================
Django project template
=======================

Шаблон проекта для Django.

Шаблон разработан с целью облегчения и ускорения процесса
развёртывания нового проекта без рутины. Ориентирован
на разработку проекта несколькими людьми, поэтому для каждого
пользователя создаётся свой конфигурационный файл
(``local_<username>.py``).

Секретный ключ, БД и почта конфигурируются из
переменных окружения, которые импортируются из файла ``conf/env``,
который не должен отслеживаться системой контроля
версий (смотри ``.gitignore``).

При разворачивании проекта есть возможность автоматически
установить кронтабы из директории ``crontabs`` (для продакшена).

Зависимости для фронтенда ставятся через bower в директорию
``project_name/static/vendor``. По-умолчанию используется
scss (``project_name/static/css/main.scss``), компилируется
при помощи django-compressor + django-libsass.

Используется регистрация с подтверждением по электропочте,
благодаря `django-allauth`. В проекте используются инклюды
для вывода полей и форм в разметке Bootstrap 3.

По-умолчанию установлено приложение ``django.contrib.flatpages``
с ``ckeditor`` на борту.

Проект предназначен для разработки на **Python 3.4+**.


Requirements
============

System
------

- bash
- python 3.4+
- nodejs

Python packages
---------------

- pip
- django >= 1.6
- jinja2

Node packages
-------------

- bower


Последние версии pip и setuptools можно установить командой::

    pip install --upgrade pip setuptools

Node можно установить из репозитория.


Quickstart
==========
Для создания проекта необходимо выполнить действия::

    django-admin.py startproject --template=https://github.com/asyncee/django-project-template/zipball/master --extension py,template,ini,json,bowerrc <имя проекта>

Для разворачивания проекта в виртуальном окружении
**для разработки** необходимо выполнить команду::

    python bootstrap.py

Для разворачивания проекта **для продакшена** необходимо
добавить флаг ``--production`` (``-p``)::

    python bootstrap.py --production

Произойдёт создание виртуального окружения, генерация секретного
ключа проекта, установка зависимостей и создание конфигурационных
файлов проекта.

Далее необходимо будет сконфигурировать базу данных/почту::

    vim conf/env

И отредактировать настройки проекта::

    vim project_name/settings/base.py          # общие настройки
    vim project_name/settings/production.py    # продакшен
    vim project_name/settings/local_<user>.py  # пользовательские настройки

Провести миграции и запустить сервер::

    project_name/manage.py migrate
    project_name/manage.py runserver


Параметр ``--settings`` можно опустить, так как после разворачивания
сайт будет использовать переменные окружения, которые могут
быть заданы извне, либо путём конфигурации в ``conf/env``.

Чтобы запустить проект на боевом сервере, можно воспользоваться
шаблонами конфигурации ``uwsgi`` и ``supervisor`` из директории
**templates**.


Configuration
-------------
Файлы конфигруации располагаются следующим образом:

``conf/env`` - конфигурация сайта, это переменные окружения
``<project_name>/settings/base.py`` - основной конфиг проекта
``<project_name>/settings/production.py`` - конфиг для продакшена
``<project_name>/settings/local_<username>.py`` - конфиг для разработки

Файл `conf/env` должен быть уникальным для production
и development окружений и не должен храниться в VCS.
Все конфигурационные файлы из директории `settings` могут (и должны)
быть добавлены в систему контроля версий.


Testing
-------
Шаблон включает в себя конфигурацию для тестирования проекта
с помощью pytest и tox.

Для запуска тестов достаточно выполнить команду::

    tox

При этом виртуальное окружение активировать не нужно.
