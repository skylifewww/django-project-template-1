==================================
Django project template by asyncee
==================================

Django template designed for fast and easy project creation, flexible custom
database/email/whatever settings and keeping your database/secret-key/any-sensitive-data
private by not including it in your CVS - just configure sensitive data to your needs,
drop it over the settings files and forget it.

Quickstart
==========
To create project using this template::

    django-admin.py startproject --template=https://github.com/asyncee/django-project-template/zipball/master <project_name>

To create virtualenv, generate project secret key, install requirements and nodejs tools::

    fab bootstrap

To run django in debug mode::

    cp local_settings_debug.py local_settings_username.py
    vim local_settings_debug.py  # configure it to your needs
    cp .config-dev-example.ini .config-dev-username.ini
    vim .config-dev-username.ini  # configure database
    DJANGO_SETTINGS_MODULE=project_name.local_settings_debug python manage.py runserver


Requirements
============
- python >= 2.7 (may work with lower versions)
- pip
- virtualenv
- fabric
- bash (preinstalled on most systems)


Description
===========
The template is consists of:
* settings modules
* private database/email/whatever configuration files
* predefined directory structure, including cache, templates and static directories
* fabric helper script
* requirements.txt file

Settings modules
----------------
- settings.py - main configuration file, placeholder for django and third-party settings. Main features is:
    - South preinstalled
    - Secret key is readed from external file, called '.secret'. This file
      generated by `fab generate_secret` or `fab bootstrap` commands. Storing
      secret in external file is good - you don't need to store it in your VCS
      along with other files. `.gitignore` ommitting secret file included.
    - Configured with sane defaults, although you need to modify settings to your needs.

- local_settings_{debug,production,username}.py - this file holds any
  environment-specific settings. It may be settings for production or developing.
  This file used when you run Django, so you must point one to it. You can do that
  by defining DJANGO_TEMPLATE_SETTINGS environment variable, --settings argument to
  `manage.py runserver` or explicitly specify it in your uwsgi.ini.

Private configuration files
---------------------------
This files holds private database/email configuration that should not be
staged in your VCS. Also this settings can be different in different project environments,
sush as production.
Template includes two examples of private configuration files:
- .config-dev-example.ini
- .config-production-example.ini

Just copy the file and change requisites according your environment, then
set right filename in local_settings.

Directory structure
-------------------
Directory structure can vary project-by-project so you can skip this section
and configure it to your needs.
Default configuration implies this set::

    static/
        css/
            src/
            build/
        js/
            src/
            build/
        img/

`src` is directories where your source "dirty-development" files is stored.
This files can be used while developing or debugging.
Minified/concatenated/custom-processed files stored in `build`. When you
deploying your project, configure web-server to serve static from `build`
directories.

Fabric helper script
--------------------
This script helps you to bootstrap the project.

Tasks you can perform:
    - bootstrap
    - generate_secret
    - install_nodejs
    - install_nodejs_modules
    - install_requirements
    - make_virtualenv
    - minify
    - minifycss
    - minifyjs
    - on_complete

Requirements file
-----------------
This is the place where the project dependencies is stored. How to specify
dependencies you can read in `official pip documentation
<http://www.pip-installer.org/en/latest/requirements.html>`
